//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Assets/Engine/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SS3D.Engine.Input
{
    public partial class @InputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""fc1b2a61-4efe-48b1-8fa0-0f76e9661897"",
            ""actions"": [
                {
                    ""name"": ""Toggle Chat"",
                    ""type"": ""Button"",
                    ""id"": ""4a079100-8c33-4e2c-bef0-076d8fdd4d15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Internal Clothing"",
                    ""type"": ""Button"",
                    ""id"": ""44ee3766-a3af-4ff5-bf58-00aa7ba8b024"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Focus Chat"",
                    ""type"": ""Button"",
                    ""id"": ""62667858-3588-4bd6-8df2-f5d534112593"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""050ff265-98d3-4571-9f6c-b86431dca50f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Examine"",
                    ""type"": ""Button"",
                    ""id"": ""444140a0-63df-450c-a1fe-5899de16dea1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9424b36a-2666-4b5d-8f74-a36ca51306cb"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Toggle Chat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dfe61014-5888-4c14-8813-945b32097b16"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Toggle Internal Clothing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0b89dfa-d863-46f2-a6fa-7e631addfdd0"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Focus Chat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f28d9b88-8318-4c17-9567-bf7f31eaf5a6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a18fe3d-2bbd-422b-b6f6-c443309970c5"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Examine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pointer"",
            ""id"": ""ee0f925f-9fe4-461f-a24e-ac37fe217016"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""facdede9-4e7a-4d84-9c04-0ec63b615915"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Secondary Action"",
                    ""type"": ""Button"",
                    ""id"": ""a805661f-bd81-4620-977b-7329ceefd3ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Action"",
                    ""type"": ""Button"",
                    ""id"": ""16234339-2e74-42b8-85a2-3c59dd67c22a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delta"",
                    ""type"": ""Value"",
                    ""id"": ""0bb50a5f-70dc-4223-9f78-75f77ce9ee69"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9d580a37-193d-428f-b525-e608d58ba5bb"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""444c76e5-8751-46c0-bf77-a80c1bf8bcfb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Secondary Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddf0c49f-e216-4650-a7c3-ea461b67f1e9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Primary Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""593ed888-c699-469c-99fd-3d026fae55d5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""3f732837-a54c-43a2-a414-ee7ed49c49de"",
            ""actions"": [
                {
                    ""name"": ""Combat Mode"",
                    ""type"": ""Button"",
                    ""id"": ""273501af-efa6-4b59-b3aa-fb34069d0d86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap Hand"",
                    ""type"": ""Button"",
                    ""id"": ""04903fa0-8d32-4877-ba2a-a2c6908df5d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop Item"",
                    ""type"": ""Button"",
                    ""id"": ""82764e0f-b059-4975-bfc9-7f76583eb694"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""ab79c055-66fb-407e-9722-dd38b5631dc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left/Right"",
                    ""type"": ""Value"",
                    ""id"": ""685b0eeb-4d29-4853-af39-d07febac1449"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Up/Down"",
                    ""type"": ""Value"",
                    ""id"": ""89b4d2dd-ad75-485f-a3bd-a58381e3aee5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""ff31f005-baff-4c04-b6cc-193ac9c07ab5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Camera"",
                    ""type"": ""Button"",
                    ""id"": ""03d45856-8207-4d7b-ba19-b430e8d56b16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""a0713e35-c920-460d-8f01-d468078101f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Camera Right"",
                    ""type"": ""Button"",
                    ""id"": ""112234e4-2e58-482d-b83d-e26482167258"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Camera Left"",
                    ""type"": ""Button"",
                    ""id"": ""a61e504e-8a11-4f88-ba0c-6e88f9c7b107"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Camera Up"",
                    ""type"": ""Button"",
                    ""id"": ""365d2e27-8d6f-4fac-a0bd-6006e1278b85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Camera Down"",
                    ""type"": ""Button"",
                    ""id"": ""86585d07-5691-4aa1-85a4-b23cab3d9472"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fac25978-e468-4a6b-9c54-7baedff35138"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Combat Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caa7255a-7c3e-45e3-a62b-842c00d00efd"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Swap Hand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a583482-4112-4ec0-8705-1e02aed98de4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Drop Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5453032b-a781-4c3f-bddf-0a7b5b893b3f"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c5168160-7249-45db-ae13-cde3ad8f25ec"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left/Right"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""baa8b52a-7414-4676-8161-294fcfb11f9d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Left/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0748a889-1c28-44b9-9a7b-f3b9f5283855"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Left/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2f575936-baf0-4c9f-bd48-45f98ec22abb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up/Down"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""75be7228-fa84-48be-ae0a-c7197fa4b8f9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Up/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e156d80f-9da7-4ecf-ad0b-ce2106e66d1f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Up/Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""45721da4-5abc-43c9-8a48-b19194f0d810"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=0.06)"",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Camera Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01572158-5267-40ce-98b1-e0a7760c4cd2"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Rotate Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1528c7b-17ba-4af1-b810-fc9c881520f4"",
                    ""path"": ""<Keyboard>/capsLock"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61d6d8b1-6d97-4f6b-bcde-eee8031b86a2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Rotate Camera Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60a38283-b018-4e79-8eba-0644ed1b5314"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Rotate Camera Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cddd5e9a-ae48-42ad-b422-4635a3c51c5b"",
                    ""path"": ""<Keyboard>/equals"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Rotate Camera Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd73c134-0835-4843-b1bd-6d7775a27414"",
                    ""path"": ""<Keyboard>/minus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Rotate Camera Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Misc"",
            ""id"": ""1926618d-2845-4407-b640-13f106a037de"",
            ""actions"": [
                {
                    ""name"": ""Left Alternate"",
                    ""type"": ""Button"",
                    ""id"": ""4ee50e36-9872-41d1-8d44-0594d7dd6500"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Control"",
                    ""type"": ""Button"",
                    ""id"": ""e05317d9-e769-4c0f-8806-bc034b0bec6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""3bdc9ccf-9109-4d56-a243-04fb070f90a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""246a3776-61b6-4e4d-8f3c-2e610098e10c"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Left Alternate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bed3b1e-7765-46d6-8c21-339f8d913313"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Left Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7545d590-b456-4a9a-adcf-7b96fa6c2e84"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse+Keyboard"",
            ""bindingGroup"": ""Mouse+Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_ToggleChat = m_UI.FindAction("Toggle Chat", throwIfNotFound: true);
            m_UI_ToggleInternalClothing = m_UI.FindAction("Toggle Internal Clothing", throwIfNotFound: true);
            m_UI_FocusChat = m_UI.FindAction("Focus Chat", throwIfNotFound: true);
            m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
            m_UI_Examine = m_UI.FindAction("Examine", throwIfNotFound: true);
            // Pointer
            m_Pointer = asset.FindActionMap("Pointer", throwIfNotFound: true);
            m_Pointer_Position = m_Pointer.FindAction("Position", throwIfNotFound: true);
            m_Pointer_SecondaryAction = m_Pointer.FindAction("Secondary Action", throwIfNotFound: true);
            m_Pointer_PrimaryAction = m_Pointer.FindAction("Primary Action", throwIfNotFound: true);
            m_Pointer_Delta = m_Pointer.FindAction("Delta", throwIfNotFound: true);
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_CombatMode = m_Player.FindAction("Combat Mode", throwIfNotFound: true);
            m_Player_SwapHand = m_Player.FindAction("Swap Hand", throwIfNotFound: true);
            m_Player_DropItem = m_Player.FindAction("Drop Item", throwIfNotFound: true);
            m_Player_Activate = m_Player.FindAction("Activate", throwIfNotFound: true);
            m_Player_LeftRight = m_Player.FindAction("Left/Right", throwIfNotFound: true);
            m_Player_UpDown = m_Player.FindAction("Up/Down", throwIfNotFound: true);
            m_Player_CameraZoom = m_Player.FindAction("Camera Zoom", throwIfNotFound: true);
            m_Player_RotateCamera = m_Player.FindAction("Rotate Camera", throwIfNotFound: true);
            m_Player_Run = m_Player.FindAction("Run", throwIfNotFound: true);
            m_Player_RotateCameraRight = m_Player.FindAction("Rotate Camera Right", throwIfNotFound: true);
            m_Player_RotateCameraLeft = m_Player.FindAction("Rotate Camera Left", throwIfNotFound: true);
            m_Player_RotateCameraUp = m_Player.FindAction("Rotate Camera Up", throwIfNotFound: true);
            m_Player_RotateCameraDown = m_Player.FindAction("Rotate Camera Down", throwIfNotFound: true);
            // Misc
            m_Misc = asset.FindActionMap("Misc", throwIfNotFound: true);
            m_Misc_LeftAlternate = m_Misc.FindAction("Left Alternate", throwIfNotFound: true);
            m_Misc_LeftControl = m_Misc.FindAction("Left Control", throwIfNotFound: true);
            m_Misc_Escape = m_Misc.FindAction("Escape", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // UI
        private readonly InputActionMap m_UI;
        private IUIActions m_UIActionsCallbackInterface;
        private readonly InputAction m_UI_ToggleChat;
        private readonly InputAction m_UI_ToggleInternalClothing;
        private readonly InputAction m_UI_FocusChat;
        private readonly InputAction m_UI_Click;
        private readonly InputAction m_UI_Examine;
        public struct UIActions
        {
            private @InputActions m_Wrapper;
            public UIActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ToggleChat => m_Wrapper.m_UI_ToggleChat;
            public InputAction @ToggleInternalClothing => m_Wrapper.m_UI_ToggleInternalClothing;
            public InputAction @FocusChat => m_Wrapper.m_UI_FocusChat;
            public InputAction @Click => m_Wrapper.m_UI_Click;
            public InputAction @Examine => m_Wrapper.m_UI_Examine;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void SetCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterface != null)
                {
                    @ToggleChat.started -= m_Wrapper.m_UIActionsCallbackInterface.OnToggleChat;
                    @ToggleChat.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnToggleChat;
                    @ToggleChat.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnToggleChat;
                    @ToggleInternalClothing.started -= m_Wrapper.m_UIActionsCallbackInterface.OnToggleInternalClothing;
                    @ToggleInternalClothing.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnToggleInternalClothing;
                    @ToggleInternalClothing.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnToggleInternalClothing;
                    @FocusChat.started -= m_Wrapper.m_UIActionsCallbackInterface.OnFocusChat;
                    @FocusChat.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnFocusChat;
                    @FocusChat.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnFocusChat;
                    @Click.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                    @Click.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                    @Click.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                    @Examine.started -= m_Wrapper.m_UIActionsCallbackInterface.OnExamine;
                    @Examine.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnExamine;
                    @Examine.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnExamine;
                }
                m_Wrapper.m_UIActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ToggleChat.started += instance.OnToggleChat;
                    @ToggleChat.performed += instance.OnToggleChat;
                    @ToggleChat.canceled += instance.OnToggleChat;
                    @ToggleInternalClothing.started += instance.OnToggleInternalClothing;
                    @ToggleInternalClothing.performed += instance.OnToggleInternalClothing;
                    @ToggleInternalClothing.canceled += instance.OnToggleInternalClothing;
                    @FocusChat.started += instance.OnFocusChat;
                    @FocusChat.performed += instance.OnFocusChat;
                    @FocusChat.canceled += instance.OnFocusChat;
                    @Click.started += instance.OnClick;
                    @Click.performed += instance.OnClick;
                    @Click.canceled += instance.OnClick;
                    @Examine.started += instance.OnExamine;
                    @Examine.performed += instance.OnExamine;
                    @Examine.canceled += instance.OnExamine;
                }
            }
        }
        public UIActions @UI => new UIActions(this);

        // Pointer
        private readonly InputActionMap m_Pointer;
        private IPointerActions m_PointerActionsCallbackInterface;
        private readonly InputAction m_Pointer_Position;
        private readonly InputAction m_Pointer_SecondaryAction;
        private readonly InputAction m_Pointer_PrimaryAction;
        private readonly InputAction m_Pointer_Delta;
        public struct PointerActions
        {
            private @InputActions m_Wrapper;
            public PointerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_Pointer_Position;
            public InputAction @SecondaryAction => m_Wrapper.m_Pointer_SecondaryAction;
            public InputAction @PrimaryAction => m_Wrapper.m_Pointer_PrimaryAction;
            public InputAction @Delta => m_Wrapper.m_Pointer_Delta;
            public InputActionMap Get() { return m_Wrapper.m_Pointer; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PointerActions set) { return set.Get(); }
            public void SetCallbacks(IPointerActions instance)
            {
                if (m_Wrapper.m_PointerActionsCallbackInterface != null)
                {
                    @Position.started -= m_Wrapper.m_PointerActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_PointerActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_PointerActionsCallbackInterface.OnPosition;
                    @SecondaryAction.started -= m_Wrapper.m_PointerActionsCallbackInterface.OnSecondaryAction;
                    @SecondaryAction.performed -= m_Wrapper.m_PointerActionsCallbackInterface.OnSecondaryAction;
                    @SecondaryAction.canceled -= m_Wrapper.m_PointerActionsCallbackInterface.OnSecondaryAction;
                    @PrimaryAction.started -= m_Wrapper.m_PointerActionsCallbackInterface.OnPrimaryAction;
                    @PrimaryAction.performed -= m_Wrapper.m_PointerActionsCallbackInterface.OnPrimaryAction;
                    @PrimaryAction.canceled -= m_Wrapper.m_PointerActionsCallbackInterface.OnPrimaryAction;
                    @Delta.started -= m_Wrapper.m_PointerActionsCallbackInterface.OnDelta;
                    @Delta.performed -= m_Wrapper.m_PointerActionsCallbackInterface.OnDelta;
                    @Delta.canceled -= m_Wrapper.m_PointerActionsCallbackInterface.OnDelta;
                }
                m_Wrapper.m_PointerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                    @SecondaryAction.started += instance.OnSecondaryAction;
                    @SecondaryAction.performed += instance.OnSecondaryAction;
                    @SecondaryAction.canceled += instance.OnSecondaryAction;
                    @PrimaryAction.started += instance.OnPrimaryAction;
                    @PrimaryAction.performed += instance.OnPrimaryAction;
                    @PrimaryAction.canceled += instance.OnPrimaryAction;
                    @Delta.started += instance.OnDelta;
                    @Delta.performed += instance.OnDelta;
                    @Delta.canceled += instance.OnDelta;
                }
            }
        }
        public PointerActions @Pointer => new PointerActions(this);

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_CombatMode;
        private readonly InputAction m_Player_SwapHand;
        private readonly InputAction m_Player_DropItem;
        private readonly InputAction m_Player_Activate;
        private readonly InputAction m_Player_LeftRight;
        private readonly InputAction m_Player_UpDown;
        private readonly InputAction m_Player_CameraZoom;
        private readonly InputAction m_Player_RotateCamera;
        private readonly InputAction m_Player_Run;
        private readonly InputAction m_Player_RotateCameraRight;
        private readonly InputAction m_Player_RotateCameraLeft;
        private readonly InputAction m_Player_RotateCameraUp;
        private readonly InputAction m_Player_RotateCameraDown;
        public struct PlayerActions
        {
            private @InputActions m_Wrapper;
            public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @CombatMode => m_Wrapper.m_Player_CombatMode;
            public InputAction @SwapHand => m_Wrapper.m_Player_SwapHand;
            public InputAction @DropItem => m_Wrapper.m_Player_DropItem;
            public InputAction @Activate => m_Wrapper.m_Player_Activate;
            public InputAction @LeftRight => m_Wrapper.m_Player_LeftRight;
            public InputAction @UpDown => m_Wrapper.m_Player_UpDown;
            public InputAction @CameraZoom => m_Wrapper.m_Player_CameraZoom;
            public InputAction @RotateCamera => m_Wrapper.m_Player_RotateCamera;
            public InputAction @Run => m_Wrapper.m_Player_Run;
            public InputAction @RotateCameraRight => m_Wrapper.m_Player_RotateCameraRight;
            public InputAction @RotateCameraLeft => m_Wrapper.m_Player_RotateCameraLeft;
            public InputAction @RotateCameraUp => m_Wrapper.m_Player_RotateCameraUp;
            public InputAction @RotateCameraDown => m_Wrapper.m_Player_RotateCameraDown;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @CombatMode.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCombatMode;
                    @CombatMode.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCombatMode;
                    @CombatMode.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCombatMode;
                    @SwapHand.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapHand;
                    @SwapHand.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapHand;
                    @SwapHand.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapHand;
                    @DropItem.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDropItem;
                    @DropItem.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDropItem;
                    @DropItem.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDropItem;
                    @Activate.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActivate;
                    @Activate.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActivate;
                    @Activate.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActivate;
                    @LeftRight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftRight;
                    @LeftRight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftRight;
                    @LeftRight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftRight;
                    @UpDown.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUpDown;
                    @UpDown.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUpDown;
                    @UpDown.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUpDown;
                    @CameraZoom.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCameraZoom;
                    @CameraZoom.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCameraZoom;
                    @CameraZoom.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCameraZoom;
                    @RotateCamera.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCamera;
                    @RotateCamera.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCamera;
                    @RotateCamera.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCamera;
                    @Run.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRun;
                    @Run.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRun;
                    @Run.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRun;
                    @RotateCameraRight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCameraRight;
                    @RotateCameraRight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCameraRight;
                    @RotateCameraRight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCameraRight;
                    @RotateCameraLeft.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCameraLeft;
                    @RotateCameraLeft.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCameraLeft;
                    @RotateCameraLeft.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCameraLeft;
                    @RotateCameraUp.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCameraUp;
                    @RotateCameraUp.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCameraUp;
                    @RotateCameraUp.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCameraUp;
                    @RotateCameraDown.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCameraDown;
                    @RotateCameraDown.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCameraDown;
                    @RotateCameraDown.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateCameraDown;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @CombatMode.started += instance.OnCombatMode;
                    @CombatMode.performed += instance.OnCombatMode;
                    @CombatMode.canceled += instance.OnCombatMode;
                    @SwapHand.started += instance.OnSwapHand;
                    @SwapHand.performed += instance.OnSwapHand;
                    @SwapHand.canceled += instance.OnSwapHand;
                    @DropItem.started += instance.OnDropItem;
                    @DropItem.performed += instance.OnDropItem;
                    @DropItem.canceled += instance.OnDropItem;
                    @Activate.started += instance.OnActivate;
                    @Activate.performed += instance.OnActivate;
                    @Activate.canceled += instance.OnActivate;
                    @LeftRight.started += instance.OnLeftRight;
                    @LeftRight.performed += instance.OnLeftRight;
                    @LeftRight.canceled += instance.OnLeftRight;
                    @UpDown.started += instance.OnUpDown;
                    @UpDown.performed += instance.OnUpDown;
                    @UpDown.canceled += instance.OnUpDown;
                    @CameraZoom.started += instance.OnCameraZoom;
                    @CameraZoom.performed += instance.OnCameraZoom;
                    @CameraZoom.canceled += instance.OnCameraZoom;
                    @RotateCamera.started += instance.OnRotateCamera;
                    @RotateCamera.performed += instance.OnRotateCamera;
                    @RotateCamera.canceled += instance.OnRotateCamera;
                    @Run.started += instance.OnRun;
                    @Run.performed += instance.OnRun;
                    @Run.canceled += instance.OnRun;
                    @RotateCameraRight.started += instance.OnRotateCameraRight;
                    @RotateCameraRight.performed += instance.OnRotateCameraRight;
                    @RotateCameraRight.canceled += instance.OnRotateCameraRight;
                    @RotateCameraLeft.started += instance.OnRotateCameraLeft;
                    @RotateCameraLeft.performed += instance.OnRotateCameraLeft;
                    @RotateCameraLeft.canceled += instance.OnRotateCameraLeft;
                    @RotateCameraUp.started += instance.OnRotateCameraUp;
                    @RotateCameraUp.performed += instance.OnRotateCameraUp;
                    @RotateCameraUp.canceled += instance.OnRotateCameraUp;
                    @RotateCameraDown.started += instance.OnRotateCameraDown;
                    @RotateCameraDown.performed += instance.OnRotateCameraDown;
                    @RotateCameraDown.canceled += instance.OnRotateCameraDown;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Misc
        private readonly InputActionMap m_Misc;
        private IMiscActions m_MiscActionsCallbackInterface;
        private readonly InputAction m_Misc_LeftAlternate;
        private readonly InputAction m_Misc_LeftControl;
        private readonly InputAction m_Misc_Escape;
        public struct MiscActions
        {
            private @InputActions m_Wrapper;
            public MiscActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftAlternate => m_Wrapper.m_Misc_LeftAlternate;
            public InputAction @LeftControl => m_Wrapper.m_Misc_LeftControl;
            public InputAction @Escape => m_Wrapper.m_Misc_Escape;
            public InputActionMap Get() { return m_Wrapper.m_Misc; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MiscActions set) { return set.Get(); }
            public void SetCallbacks(IMiscActions instance)
            {
                if (m_Wrapper.m_MiscActionsCallbackInterface != null)
                {
                    @LeftAlternate.started -= m_Wrapper.m_MiscActionsCallbackInterface.OnLeftAlternate;
                    @LeftAlternate.performed -= m_Wrapper.m_MiscActionsCallbackInterface.OnLeftAlternate;
                    @LeftAlternate.canceled -= m_Wrapper.m_MiscActionsCallbackInterface.OnLeftAlternate;
                    @LeftControl.started -= m_Wrapper.m_MiscActionsCallbackInterface.OnLeftControl;
                    @LeftControl.performed -= m_Wrapper.m_MiscActionsCallbackInterface.OnLeftControl;
                    @LeftControl.canceled -= m_Wrapper.m_MiscActionsCallbackInterface.OnLeftControl;
                    @Escape.started -= m_Wrapper.m_MiscActionsCallbackInterface.OnEscape;
                    @Escape.performed -= m_Wrapper.m_MiscActionsCallbackInterface.OnEscape;
                    @Escape.canceled -= m_Wrapper.m_MiscActionsCallbackInterface.OnEscape;
                }
                m_Wrapper.m_MiscActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @LeftAlternate.started += instance.OnLeftAlternate;
                    @LeftAlternate.performed += instance.OnLeftAlternate;
                    @LeftAlternate.canceled += instance.OnLeftAlternate;
                    @LeftControl.started += instance.OnLeftControl;
                    @LeftControl.performed += instance.OnLeftControl;
                    @LeftControl.canceled += instance.OnLeftControl;
                    @Escape.started += instance.OnEscape;
                    @Escape.performed += instance.OnEscape;
                    @Escape.canceled += instance.OnEscape;
                }
            }
        }
        public MiscActions @Misc => new MiscActions(this);
        private int m_MouseKeyboardSchemeIndex = -1;
        public InputControlScheme MouseKeyboardScheme
        {
            get
            {
                if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse+Keyboard");
                return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
            }
        }
        public interface IUIActions
        {
            void OnToggleChat(InputAction.CallbackContext context);
            void OnToggleInternalClothing(InputAction.CallbackContext context);
            void OnFocusChat(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnExamine(InputAction.CallbackContext context);
        }
        public interface IPointerActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnSecondaryAction(InputAction.CallbackContext context);
            void OnPrimaryAction(InputAction.CallbackContext context);
            void OnDelta(InputAction.CallbackContext context);
        }
        public interface IPlayerActions
        {
            void OnCombatMode(InputAction.CallbackContext context);
            void OnSwapHand(InputAction.CallbackContext context);
            void OnDropItem(InputAction.CallbackContext context);
            void OnActivate(InputAction.CallbackContext context);
            void OnLeftRight(InputAction.CallbackContext context);
            void OnUpDown(InputAction.CallbackContext context);
            void OnCameraZoom(InputAction.CallbackContext context);
            void OnRotateCamera(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
            void OnRotateCameraRight(InputAction.CallbackContext context);
            void OnRotateCameraLeft(InputAction.CallbackContext context);
            void OnRotateCameraUp(InputAction.CallbackContext context);
            void OnRotateCameraDown(InputAction.CallbackContext context);
        }
        public interface IMiscActions
        {
            void OnLeftAlternate(InputAction.CallbackContext context);
            void OnLeftControl(InputAction.CallbackContext context);
            void OnEscape(InputAction.CallbackContext context);
        }
    }
}
