//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Content/Systems/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SS3D.Systems.Inputs
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""3ef86c6a-569d-4f13-bd35-038e935055c7"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""2cb0bb27-b1cf-4fd4-896d-eac50413bfd0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Vertical Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""44e7f37c-88c6-4bd4-b0d0-fe0b161cafac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Horizontal Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""2bb89fc3-b3a6-4fca-a4c6-c48087be1a5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.4)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""05c11a8a-0897-4250-af8d-089612cbaf7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Snap Right"",
                    ""type"": ""Button"",
                    ""id"": ""6075863c-a88a-4295-b561-24da4f2042e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Snap Left"",
                    ""type"": ""Button"",
                    ""id"": ""c3a693ef-8736-4622-91e9-3b4a48250e9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ff51b615-eaa5-4aaa-8081-2de3f4fb981f"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b95da6e3-4d0a-449d-8d5e-c97b2535ad30"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f9899abd-ab15-457e-bb90-4af8cd430a81"",
                    ""path"": ""<Keyboard>/equals"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b381001b-6041-4e97-bdbb-0cfefd700994"",
                    ""path"": ""<Keyboard>/minus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""966f1f13-073c-4178-a716-6be9a87cd145"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""c62adfd0-5156-4926-9c91-372525a48e7b"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""17f6c765-175e-491a-8171-bf06c4b1c5fe"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""fe16d086-24d8-4fa4-8f82-5abbbe27e3ed"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""Horizontal Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""908e0cf0-c70c-4aa0-bd22-8c9a63a99c17"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""eb5d1172-1f72-42ff-a6e0-8bb4ced70427"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""caf05d9f-86a5-4300-8575-77154dd31167"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""8cf44a8a-7bbc-489a-ae0a-c3692b0a8eb4"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""611931f2-395b-4f6b-82f3-fba56553f7b6"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""ac41db70-e65e-4d9d-bc6a-ac32e65a0263"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Snap Right"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""17263931-c9fd-4fd0-b166-81f5d8178278"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Snap Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""a250103f-a5e1-4ddf-bad3-40f482969ce3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Snap Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""61ddd7b0-7da5-4076-a802-921a5ea88f18"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Snap Left"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""a0e20945-47bf-40b4-87d8-f710db0d65d3"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Snap Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""7af6e38a-fc12-42d9-a3c4-ea5553ef6f6e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Snap Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Movement"",
            ""id"": ""181ca407-a88b-40a4-b9c1-34a4c3c8eebd"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""03279cdf-22e4-4cb9-ab4a-99169adc0c0c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Toggle Run"",
                    ""type"": ""Button"",
                    ""id"": ""0d252c1e-9372-4c6c-8f2a-7e2debcbf4c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6bf42294-8111-4bb7-9d46-8600bba84e15"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""05107c8e-7e3a-4e0b-9932-c6ed24581da7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""001e5cc5-5bda-4d1c-b104-fb3f43320864"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4e1a5c42-d81a-40d4-9b2f-3717c707a860"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4e1aef01-394b-47fb-9a10-4b37e09c868a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9c8bfe7e-1820-4fca-9e38-9ba5b12451e2"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Console"",
            ""id"": ""93948c48-a26c-4aa5-8858-a65bfed4a74b"",
            ""actions"": [
                {
                    ""name"": ""Open"",
                    ""type"": ""Button"",
                    ""id"": ""b8340169-d350-42a3-9402-c441823ea17b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""8f2d519e-cca5-4cf5-8f41-40db56da0ce3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""7e84ab33-510d-4b8c-81ba-320b22c4d79e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Command"",
                    ""type"": ""Value"",
                    ""id"": ""ff3200a9-95f4-4eb1-b4a0-74bc024d96b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""156d7b02-f875-43a8-a319-b2a186bcb3ee"",
                    ""path"": ""<Keyboard>/f12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56975ace-4039-475a-afcc-c7237e101cd4"",
                    ""path"": ""<Keyboard>/f12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""930857bf-1252-40c3-9f11-23ec559d0118"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b73f008c-2855-47c7-9bbd-d36f70a16e33"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8ab284b7-4371-4b2b-b45d-893996837466"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Command"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7680a229-efc6-44db-b7aa-4477c5e39fbd"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Command"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""034e90fd-378b-4869-afc1-abb6ab69aa16"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Command"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Hotkeys"",
            ""id"": ""61ba5575-d6be-4404-80ea-f2f98a545abd"",
            ""actions"": [
                {
                    ""name"": ""Swap Hands"",
                    ""type"": ""Button"",
                    ""id"": ""79d017bd-a1c1-4302-b01a-cd4af2308ca0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""e1f97b33-9bd8-4c56-a386-2c9b59429d78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""70ffe06d-8a63-45a5-bf9c-69d72518054f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Internal Clothing"",
                    ""type"": ""Button"",
                    ""id"": ""2b00f3b3-1009-4420-8ab4-469afcf1ee2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2fe311c2-7db5-4c48-b5e2-06e7b9e183c7"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap Hands"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""779894f6-2b6c-4762-9f11-40185bbdf00f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f2dc700-84e6-4ed1-98ca-97bf9681029b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90a5232d-0034-4601-8267-92c3e3582840"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Internal Clothing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Other"",
            ""id"": ""338bc35e-a25e-40ae-82c1-3e3a895d91c1"",
            ""actions"": [
                {
                    ""name"": ""Fade"",
                    ""type"": ""Button"",
                    ""id"": ""dee554b0-b32e-48c6-94cd-d6e1085ae07e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap Minds"",
                    ""type"": ""Button"",
                    ""id"": ""848f948f-55f8-440f-befe-1869e0ffd428"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Click"",
                    ""type"": ""Button"",
                    ""id"": ""4e6a890a-3610-4e1e-ba50-7337426e7a9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary Click"",
                    ""type"": ""Button"",
                    ""id"": ""329397df-813c-463f-9fa3-3cfae3e761bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Menu"",
                    ""type"": ""Button"",
                    ""id"": ""3425a866-8013-4556-bd14-6f493998eb0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spawn Cans"",
                    ""type"": ""Button"",
                    ""id"": ""d317c9ce-8810-4e01-b5d3-b68f8ea79a8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Runtime Editor"",
                    ""type"": ""Button"",
                    ""id"": ""6cf79877-798f-449c-9aa5-084a04567a38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ragdoll"",
                    ""type"": ""Button"",
                    ""id"": ""789515c7-61e9-4ba7-ad2a-82508ecf70db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""965dcef2-a390-46c2-9282-9bf85c804292"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""See Container Contents"",
                    ""type"": ""Button"",
                    ""id"": ""31df5ed3-cf49-49d0-bc99-01aa83f911e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Show Owner"",
                    ""type"": ""Button"",
                    ""id"": ""05bcc145-5585-46a3-a3ef-97f044637083"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Selection Debug"",
                    ""type"": ""Button"",
                    ""id"": ""1fe6940a-87b8-43cc-b18d-e6318fdad13b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SendChatMessage"",
                    ""type"": ""Button"",
                    ""id"": ""3ec638f1-be3c-4b60-a0ec-2df8837e6eb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""44a8ae88-f5c6-4f51-b372-0359b0666e54"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fade"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9f7fc84-755f-4c59-9393-1e607f01bed6"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap Minds"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0adc5e3e-d6e9-4b28-8bda-8a8f58157d90"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63cbb85f-4adc-474a-aba1-26a9c11d983c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""052d3e3e-3667-40f1-a318-23f33949cbe7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0202ca85-b208-4587-8cc0-45b43b782462"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn Cans"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e0906c5-bfd6-41f7-8e95-1c3caccce5ce"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Runtime Editor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13c6e68f-bef5-47b0-986c-77bb4782e2c9"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ragdoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8067fbf9-bb84-461e-9e6d-36ba4fdb6a43"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""141d574a-2708-4c2c-989b-c8ef5d8e4c58"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""See Container Contents"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12af3e1d-66c4-4f86-994d-70258b944a24"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Show Owner"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1b14569-1522-4899-863f-d0e2b2844e71"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Selection Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cd2a937-6dc1-4ed4-b380-059921ebd7da"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendChatMessage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7880a338-5cc5-49f9-8f46-c033d59be607"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendChatMessage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Tile Creator"",
            ""id"": ""f09dab6d-d07b-4287-8d9b-d0063c3232e3"",
            ""actions"": [
                {
                    ""name"": ""Toggle Menu"",
                    ""type"": ""Button"",
                    ""id"": ""33c0c58f-fde8-4c73-ac8f-b8bfb2d98356"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Place"",
                    ""type"": ""Button"",
                    ""id"": ""fb428f7f-c99e-4c81-b825-65cea417ee0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Replace"",
                    ""type"": ""Button"",
                    ""id"": ""f49d6ece-3eb7-4e55-9e29-a95eadff8a64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""3d66fa43-e646-40a5-9c1c-a7cd6fbf765b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""f4257e8f-54a4-4181-839c-930d11200e42"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Square Drag"",
                    ""type"": ""Button"",
                    ""id"": ""d35f32a4-b1e4-441e-9f5a-d03aba25ef2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9da0c76e-68b2-4fec-a5d3-fcd559c221bf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78cc14e5-d0e3-4503-949c-e1a9a26f70db"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Replace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90e9bf7e-63bd-45ae-8d5f-8bf929ac9883"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25bca2ed-74c2-46ad-bc12-12738567e0e8"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7febaa41-8117-4a99-b7cc-af81c91346dd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c19df163-7e9b-4f1e-8e61-8b142ffcb3d4"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Square Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interactions"",
            ""id"": ""87b9f9c5-bc89-4bbb-909e-029c755fe7c2"",
            ""actions"": [
                {
                    ""name"": ""Run Primary"",
                    ""type"": ""Button"",
                    ""id"": ""a5dbf173-d977-4745-b4dd-6216affabb56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View Interactions"",
                    ""type"": ""Button"",
                    ""id"": ""3ede67cb-d174-4d7a-a71a-c5e6019b27d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f370461-d3b7-4f8f-a6f4-ee921a5c474a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ded0d917-1c97-4c2c-b2ff-645cc34edb8f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View Interactions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
            m_Camera_VerticalRotation = m_Camera.FindAction("Vertical Rotation", throwIfNotFound: true);
            m_Camera_HorizontalRotation = m_Camera.FindAction("Horizontal Rotation", throwIfNotFound: true);
            m_Camera_MouseRotation = m_Camera.FindAction("Mouse Rotation", throwIfNotFound: true);
            m_Camera_SnapRight = m_Camera.FindAction("Snap Right", throwIfNotFound: true);
            m_Camera_SnapLeft = m_Camera.FindAction("Snap Left", throwIfNotFound: true);
            // Movement
            m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
            m_Movement_Movement = m_Movement.FindAction("Movement", throwIfNotFound: true);
            m_Movement_ToggleRun = m_Movement.FindAction("Toggle Run", throwIfNotFound: true);
            // Console
            m_Console = asset.FindActionMap("Console", throwIfNotFound: true);
            m_Console_Open = m_Console.FindAction("Open", throwIfNotFound: true);
            m_Console_Close = m_Console.FindAction("Close", throwIfNotFound: true);
            m_Console_Submit = m_Console.FindAction("Submit", throwIfNotFound: true);
            m_Console_SwitchCommand = m_Console.FindAction("Switch Command", throwIfNotFound: true);
            // Hotkeys
            m_Hotkeys = asset.FindActionMap("Hotkeys", throwIfNotFound: true);
            m_Hotkeys_SwapHands = m_Hotkeys.FindAction("Swap Hands", throwIfNotFound: true);
            m_Hotkeys_Use = m_Hotkeys.FindAction("Use", throwIfNotFound: true);
            m_Hotkeys_Drop = m_Hotkeys.FindAction("Drop", throwIfNotFound: true);
            m_Hotkeys_ToggleInternalClothing = m_Hotkeys.FindAction("Toggle Internal Clothing", throwIfNotFound: true);
            // Other
            m_Other = asset.FindActionMap("Other", throwIfNotFound: true);
            m_Other_Fade = m_Other.FindAction("Fade", throwIfNotFound: true);
            m_Other_SwapMinds = m_Other.FindAction("Swap Minds", throwIfNotFound: true);
            m_Other_PrimaryClick = m_Other.FindAction("Primary Click", throwIfNotFound: true);
            m_Other_SecondaryClick = m_Other.FindAction("Secondary Click", throwIfNotFound: true);
            m_Other_ToggleMenu = m_Other.FindAction("Toggle Menu", throwIfNotFound: true);
            m_Other_SpawnCans = m_Other.FindAction("Spawn Cans", throwIfNotFound: true);
            m_Other_ToggleRuntimeEditor = m_Other.FindAction("Toggle Runtime Editor", throwIfNotFound: true);
            m_Other_Ragdoll = m_Other.FindAction("Ragdoll", throwIfNotFound: true);
            m_Other_Attack = m_Other.FindAction("Attack", throwIfNotFound: true);
            m_Other_SeeContainerContents = m_Other.FindAction("See Container Contents", throwIfNotFound: true);
            m_Other_ShowOwner = m_Other.FindAction("Show Owner", throwIfNotFound: true);
            m_Other_ToggleSelectionDebug = m_Other.FindAction("Toggle Selection Debug", throwIfNotFound: true);
            m_Other_SendChatMessage = m_Other.FindAction("SendChatMessage", throwIfNotFound: true);
            // Tile Creator
            m_TileCreator = asset.FindActionMap("Tile Creator", throwIfNotFound: true);
            m_TileCreator_ToggleMenu = m_TileCreator.FindAction("Toggle Menu", throwIfNotFound: true);
            m_TileCreator_Place = m_TileCreator.FindAction("Place", throwIfNotFound: true);
            m_TileCreator_Replace = m_TileCreator.FindAction("Replace", throwIfNotFound: true);
            m_TileCreator_Rotate = m_TileCreator.FindAction("Rotate", throwIfNotFound: true);
            m_TileCreator_Delete = m_TileCreator.FindAction("Delete", throwIfNotFound: true);
            m_TileCreator_SquareDrag = m_TileCreator.FindAction("Square Drag", throwIfNotFound: true);
            // Interactions
            m_Interactions = asset.FindActionMap("Interactions", throwIfNotFound: true);
            m_Interactions_RunPrimary = m_Interactions.FindAction("Run Primary", throwIfNotFound: true);
            m_Interactions_ViewInteractions = m_Interactions.FindAction("View Interactions", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Camera
        private readonly InputActionMap m_Camera;
        private ICameraActions m_CameraActionsCallbackInterface;
        private readonly InputAction m_Camera_Zoom;
        private readonly InputAction m_Camera_VerticalRotation;
        private readonly InputAction m_Camera_HorizontalRotation;
        private readonly InputAction m_Camera_MouseRotation;
        private readonly InputAction m_Camera_SnapRight;
        private readonly InputAction m_Camera_SnapLeft;
        public struct CameraActions
        {
            private @Controls m_Wrapper;
            public CameraActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
            public InputAction @VerticalRotation => m_Wrapper.m_Camera_VerticalRotation;
            public InputAction @HorizontalRotation => m_Wrapper.m_Camera_HorizontalRotation;
            public InputAction @MouseRotation => m_Wrapper.m_Camera_MouseRotation;
            public InputAction @SnapRight => m_Wrapper.m_Camera_SnapRight;
            public InputAction @SnapLeft => m_Wrapper.m_Camera_SnapLeft;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void SetCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterface != null)
                {
                    @Zoom.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                    @Zoom.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                    @Zoom.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                    @VerticalRotation.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnVerticalRotation;
                    @VerticalRotation.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnVerticalRotation;
                    @VerticalRotation.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnVerticalRotation;
                    @HorizontalRotation.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnHorizontalRotation;
                    @HorizontalRotation.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnHorizontalRotation;
                    @HorizontalRotation.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnHorizontalRotation;
                    @MouseRotation.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseRotation;
                    @MouseRotation.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseRotation;
                    @MouseRotation.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseRotation;
                    @SnapRight.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnSnapRight;
                    @SnapRight.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnSnapRight;
                    @SnapRight.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnSnapRight;
                    @SnapLeft.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnSnapLeft;
                    @SnapLeft.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnSnapLeft;
                    @SnapLeft.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnSnapLeft;
                }
                m_Wrapper.m_CameraActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Zoom.started += instance.OnZoom;
                    @Zoom.performed += instance.OnZoom;
                    @Zoom.canceled += instance.OnZoom;
                    @VerticalRotation.started += instance.OnVerticalRotation;
                    @VerticalRotation.performed += instance.OnVerticalRotation;
                    @VerticalRotation.canceled += instance.OnVerticalRotation;
                    @HorizontalRotation.started += instance.OnHorizontalRotation;
                    @HorizontalRotation.performed += instance.OnHorizontalRotation;
                    @HorizontalRotation.canceled += instance.OnHorizontalRotation;
                    @MouseRotation.started += instance.OnMouseRotation;
                    @MouseRotation.performed += instance.OnMouseRotation;
                    @MouseRotation.canceled += instance.OnMouseRotation;
                    @SnapRight.started += instance.OnSnapRight;
                    @SnapRight.performed += instance.OnSnapRight;
                    @SnapRight.canceled += instance.OnSnapRight;
                    @SnapLeft.started += instance.OnSnapLeft;
                    @SnapLeft.performed += instance.OnSnapLeft;
                    @SnapLeft.canceled += instance.OnSnapLeft;
                }
            }
        }
        public CameraActions @Camera => new CameraActions(this);

        // Movement
        private readonly InputActionMap m_Movement;
        private IMovementActions m_MovementActionsCallbackInterface;
        private readonly InputAction m_Movement_Movement;
        private readonly InputAction m_Movement_ToggleRun;
        public struct MovementActions
        {
            private @Controls m_Wrapper;
            public MovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Movement_Movement;
            public InputAction @ToggleRun => m_Wrapper.m_Movement_ToggleRun;
            public InputActionMap Get() { return m_Wrapper.m_Movement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
            public void SetCallbacks(IMovementActions instance)
            {
                if (m_Wrapper.m_MovementActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                    @ToggleRun.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnToggleRun;
                    @ToggleRun.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnToggleRun;
                    @ToggleRun.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnToggleRun;
                }
                m_Wrapper.m_MovementActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @ToggleRun.started += instance.OnToggleRun;
                    @ToggleRun.performed += instance.OnToggleRun;
                    @ToggleRun.canceled += instance.OnToggleRun;
                }
            }
        }
        public MovementActions @Movement => new MovementActions(this);

        // Console
        private readonly InputActionMap m_Console;
        private IConsoleActions m_ConsoleActionsCallbackInterface;
        private readonly InputAction m_Console_Open;
        private readonly InputAction m_Console_Close;
        private readonly InputAction m_Console_Submit;
        private readonly InputAction m_Console_SwitchCommand;
        public struct ConsoleActions
        {
            private @Controls m_Wrapper;
            public ConsoleActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Open => m_Wrapper.m_Console_Open;
            public InputAction @Close => m_Wrapper.m_Console_Close;
            public InputAction @Submit => m_Wrapper.m_Console_Submit;
            public InputAction @SwitchCommand => m_Wrapper.m_Console_SwitchCommand;
            public InputActionMap Get() { return m_Wrapper.m_Console; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ConsoleActions set) { return set.Get(); }
            public void SetCallbacks(IConsoleActions instance)
            {
                if (m_Wrapper.m_ConsoleActionsCallbackInterface != null)
                {
                    @Open.started -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnOpen;
                    @Open.performed -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnOpen;
                    @Open.canceled -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnOpen;
                    @Close.started -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnClose;
                    @Close.performed -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnClose;
                    @Close.canceled -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnClose;
                    @Submit.started -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnSubmit;
                    @Submit.performed -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnSubmit;
                    @Submit.canceled -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnSubmit;
                    @SwitchCommand.started -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnSwitchCommand;
                    @SwitchCommand.performed -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnSwitchCommand;
                    @SwitchCommand.canceled -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnSwitchCommand;
                }
                m_Wrapper.m_ConsoleActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Open.started += instance.OnOpen;
                    @Open.performed += instance.OnOpen;
                    @Open.canceled += instance.OnOpen;
                    @Close.started += instance.OnClose;
                    @Close.performed += instance.OnClose;
                    @Close.canceled += instance.OnClose;
                    @Submit.started += instance.OnSubmit;
                    @Submit.performed += instance.OnSubmit;
                    @Submit.canceled += instance.OnSubmit;
                    @SwitchCommand.started += instance.OnSwitchCommand;
                    @SwitchCommand.performed += instance.OnSwitchCommand;
                    @SwitchCommand.canceled += instance.OnSwitchCommand;
                }
            }
        }
        public ConsoleActions @Console => new ConsoleActions(this);

        // Hotkeys
        private readonly InputActionMap m_Hotkeys;
        private IHotkeysActions m_HotkeysActionsCallbackInterface;
        private readonly InputAction m_Hotkeys_SwapHands;
        private readonly InputAction m_Hotkeys_Use;
        private readonly InputAction m_Hotkeys_Drop;
        private readonly InputAction m_Hotkeys_ToggleInternalClothing;
        public struct HotkeysActions
        {
            private @Controls m_Wrapper;
            public HotkeysActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @SwapHands => m_Wrapper.m_Hotkeys_SwapHands;
            public InputAction @Use => m_Wrapper.m_Hotkeys_Use;
            public InputAction @Drop => m_Wrapper.m_Hotkeys_Drop;
            public InputAction @ToggleInternalClothing => m_Wrapper.m_Hotkeys_ToggleInternalClothing;
            public InputActionMap Get() { return m_Wrapper.m_Hotkeys; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HotkeysActions set) { return set.Get(); }
            public void SetCallbacks(IHotkeysActions instance)
            {
                if (m_Wrapper.m_HotkeysActionsCallbackInterface != null)
                {
                    @SwapHands.started -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnSwapHands;
                    @SwapHands.performed -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnSwapHands;
                    @SwapHands.canceled -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnSwapHands;
                    @Use.started -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnUse;
                    @Use.performed -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnUse;
                    @Use.canceled -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnUse;
                    @Drop.started -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnDrop;
                    @Drop.performed -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnDrop;
                    @Drop.canceled -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnDrop;
                    @ToggleInternalClothing.started -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnToggleInternalClothing;
                    @ToggleInternalClothing.performed -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnToggleInternalClothing;
                    @ToggleInternalClothing.canceled -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnToggleInternalClothing;
                }
                m_Wrapper.m_HotkeysActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @SwapHands.started += instance.OnSwapHands;
                    @SwapHands.performed += instance.OnSwapHands;
                    @SwapHands.canceled += instance.OnSwapHands;
                    @Use.started += instance.OnUse;
                    @Use.performed += instance.OnUse;
                    @Use.canceled += instance.OnUse;
                    @Drop.started += instance.OnDrop;
                    @Drop.performed += instance.OnDrop;
                    @Drop.canceled += instance.OnDrop;
                    @ToggleInternalClothing.started += instance.OnToggleInternalClothing;
                    @ToggleInternalClothing.performed += instance.OnToggleInternalClothing;
                    @ToggleInternalClothing.canceled += instance.OnToggleInternalClothing;
                }
            }
        }
        public HotkeysActions @Hotkeys => new HotkeysActions(this);

        // Other
        private readonly InputActionMap m_Other;
        private IOtherActions m_OtherActionsCallbackInterface;
        private readonly InputAction m_Other_Fade;
        private readonly InputAction m_Other_SwapMinds;
        private readonly InputAction m_Other_PrimaryClick;
        private readonly InputAction m_Other_SecondaryClick;
        private readonly InputAction m_Other_ToggleMenu;
        private readonly InputAction m_Other_SpawnCans;
        private readonly InputAction m_Other_ToggleRuntimeEditor;
        private readonly InputAction m_Other_Ragdoll;
        private readonly InputAction m_Other_Attack;
        private readonly InputAction m_Other_SeeContainerContents;
        private readonly InputAction m_Other_ShowOwner;
        private readonly InputAction m_Other_ToggleSelectionDebug;
        private readonly InputAction m_Other_SendChatMessage;
        public struct OtherActions
        {
            private @Controls m_Wrapper;
            public OtherActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Fade => m_Wrapper.m_Other_Fade;
            public InputAction @SwapMinds => m_Wrapper.m_Other_SwapMinds;
            public InputAction @PrimaryClick => m_Wrapper.m_Other_PrimaryClick;
            public InputAction @SecondaryClick => m_Wrapper.m_Other_SecondaryClick;
            public InputAction @ToggleMenu => m_Wrapper.m_Other_ToggleMenu;
            public InputAction @SpawnCans => m_Wrapper.m_Other_SpawnCans;
            public InputAction @ToggleRuntimeEditor => m_Wrapper.m_Other_ToggleRuntimeEditor;
            public InputAction @Ragdoll => m_Wrapper.m_Other_Ragdoll;
            public InputAction @Attack => m_Wrapper.m_Other_Attack;
            public InputAction @SeeContainerContents => m_Wrapper.m_Other_SeeContainerContents;
            public InputAction @ShowOwner => m_Wrapper.m_Other_ShowOwner;
            public InputAction @ToggleSelectionDebug => m_Wrapper.m_Other_ToggleSelectionDebug;
            public InputAction @SendChatMessage => m_Wrapper.m_Other_SendChatMessage;
            public InputActionMap Get() { return m_Wrapper.m_Other; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(OtherActions set) { return set.Get(); }
            public void SetCallbacks(IOtherActions instance)
            {
                if (m_Wrapper.m_OtherActionsCallbackInterface != null)
                {
                    @Fade.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnFade;
                    @Fade.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnFade;
                    @Fade.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnFade;
                    @SwapMinds.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnSwapMinds;
                    @SwapMinds.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnSwapMinds;
                    @SwapMinds.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnSwapMinds;
                    @PrimaryClick.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnPrimaryClick;
                    @PrimaryClick.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnPrimaryClick;
                    @PrimaryClick.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnPrimaryClick;
                    @SecondaryClick.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnSecondaryClick;
                    @SecondaryClick.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnSecondaryClick;
                    @SecondaryClick.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnSecondaryClick;
                    @ToggleMenu.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnToggleMenu;
                    @ToggleMenu.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnToggleMenu;
                    @ToggleMenu.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnToggleMenu;
                    @SpawnCans.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnSpawnCans;
                    @SpawnCans.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnSpawnCans;
                    @SpawnCans.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnSpawnCans;
                    @ToggleRuntimeEditor.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnToggleRuntimeEditor;
                    @ToggleRuntimeEditor.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnToggleRuntimeEditor;
                    @ToggleRuntimeEditor.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnToggleRuntimeEditor;
                    @Ragdoll.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnRagdoll;
                    @Ragdoll.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnRagdoll;
                    @Ragdoll.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnRagdoll;
                    @Attack.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnAttack;
                    @SeeContainerContents.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnSeeContainerContents;
                    @SeeContainerContents.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnSeeContainerContents;
                    @SeeContainerContents.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnSeeContainerContents;
                    @ShowOwner.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnShowOwner;
                    @ShowOwner.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnShowOwner;
                    @ShowOwner.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnShowOwner;
                    @ToggleSelectionDebug.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnToggleSelectionDebug;
                    @ToggleSelectionDebug.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnToggleSelectionDebug;
                    @ToggleSelectionDebug.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnToggleSelectionDebug;
                    @SendChatMessage.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnSendChatMessage;
                    @SendChatMessage.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnSendChatMessage;
                    @SendChatMessage.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnSendChatMessage;
                }
                m_Wrapper.m_OtherActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Fade.started += instance.OnFade;
                    @Fade.performed += instance.OnFade;
                    @Fade.canceled += instance.OnFade;
                    @SwapMinds.started += instance.OnSwapMinds;
                    @SwapMinds.performed += instance.OnSwapMinds;
                    @SwapMinds.canceled += instance.OnSwapMinds;
                    @PrimaryClick.started += instance.OnPrimaryClick;
                    @PrimaryClick.performed += instance.OnPrimaryClick;
                    @PrimaryClick.canceled += instance.OnPrimaryClick;
                    @SecondaryClick.started += instance.OnSecondaryClick;
                    @SecondaryClick.performed += instance.OnSecondaryClick;
                    @SecondaryClick.canceled += instance.OnSecondaryClick;
                    @ToggleMenu.started += instance.OnToggleMenu;
                    @ToggleMenu.performed += instance.OnToggleMenu;
                    @ToggleMenu.canceled += instance.OnToggleMenu;
                    @SpawnCans.started += instance.OnSpawnCans;
                    @SpawnCans.performed += instance.OnSpawnCans;
                    @SpawnCans.canceled += instance.OnSpawnCans;
                    @ToggleRuntimeEditor.started += instance.OnToggleRuntimeEditor;
                    @ToggleRuntimeEditor.performed += instance.OnToggleRuntimeEditor;
                    @ToggleRuntimeEditor.canceled += instance.OnToggleRuntimeEditor;
                    @Ragdoll.started += instance.OnRagdoll;
                    @Ragdoll.performed += instance.OnRagdoll;
                    @Ragdoll.canceled += instance.OnRagdoll;
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                    @SeeContainerContents.started += instance.OnSeeContainerContents;
                    @SeeContainerContents.performed += instance.OnSeeContainerContents;
                    @SeeContainerContents.canceled += instance.OnSeeContainerContents;
                    @ShowOwner.started += instance.OnShowOwner;
                    @ShowOwner.performed += instance.OnShowOwner;
                    @ShowOwner.canceled += instance.OnShowOwner;
                    @ToggleSelectionDebug.started += instance.OnToggleSelectionDebug;
                    @ToggleSelectionDebug.performed += instance.OnToggleSelectionDebug;
                    @ToggleSelectionDebug.canceled += instance.OnToggleSelectionDebug;
                    @SendChatMessage.started += instance.OnSendChatMessage;
                    @SendChatMessage.performed += instance.OnSendChatMessage;
                    @SendChatMessage.canceled += instance.OnSendChatMessage;
                }
            }
        }
        public OtherActions @Other => new OtherActions(this);

        // Tile Creator
        private readonly InputActionMap m_TileCreator;
        private ITileCreatorActions m_TileCreatorActionsCallbackInterface;
        private readonly InputAction m_TileCreator_ToggleMenu;
        private readonly InputAction m_TileCreator_Place;
        private readonly InputAction m_TileCreator_Replace;
        private readonly InputAction m_TileCreator_Rotate;
        private readonly InputAction m_TileCreator_Delete;
        private readonly InputAction m_TileCreator_SquareDrag;
        public struct TileCreatorActions
        {
            private @Controls m_Wrapper;
            public TileCreatorActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @ToggleMenu => m_Wrapper.m_TileCreator_ToggleMenu;
            public InputAction @Place => m_Wrapper.m_TileCreator_Place;
            public InputAction @Replace => m_Wrapper.m_TileCreator_Replace;
            public InputAction @Rotate => m_Wrapper.m_TileCreator_Rotate;
            public InputAction @Delete => m_Wrapper.m_TileCreator_Delete;
            public InputAction @SquareDrag => m_Wrapper.m_TileCreator_SquareDrag;
            public InputActionMap Get() { return m_Wrapper.m_TileCreator; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TileCreatorActions set) { return set.Get(); }
            public void SetCallbacks(ITileCreatorActions instance)
            {
                if (m_Wrapper.m_TileCreatorActionsCallbackInterface != null)
                {
                    @ToggleMenu.started -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnToggleMenu;
                    @ToggleMenu.performed -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnToggleMenu;
                    @ToggleMenu.canceled -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnToggleMenu;
                    @Place.started -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnPlace;
                    @Place.performed -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnPlace;
                    @Place.canceled -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnPlace;
                    @Replace.started -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnReplace;
                    @Replace.performed -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnReplace;
                    @Replace.canceled -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnReplace;
                    @Rotate.started -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnRotate;
                    @Rotate.performed -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnRotate;
                    @Rotate.canceled -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnRotate;
                    @Delete.started -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnDelete;
                    @Delete.performed -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnDelete;
                    @Delete.canceled -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnDelete;
                    @SquareDrag.started -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnSquareDrag;
                    @SquareDrag.performed -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnSquareDrag;
                    @SquareDrag.canceled -= m_Wrapper.m_TileCreatorActionsCallbackInterface.OnSquareDrag;
                }
                m_Wrapper.m_TileCreatorActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ToggleMenu.started += instance.OnToggleMenu;
                    @ToggleMenu.performed += instance.OnToggleMenu;
                    @ToggleMenu.canceled += instance.OnToggleMenu;
                    @Place.started += instance.OnPlace;
                    @Place.performed += instance.OnPlace;
                    @Place.canceled += instance.OnPlace;
                    @Replace.started += instance.OnReplace;
                    @Replace.performed += instance.OnReplace;
                    @Replace.canceled += instance.OnReplace;
                    @Rotate.started += instance.OnRotate;
                    @Rotate.performed += instance.OnRotate;
                    @Rotate.canceled += instance.OnRotate;
                    @Delete.started += instance.OnDelete;
                    @Delete.performed += instance.OnDelete;
                    @Delete.canceled += instance.OnDelete;
                    @SquareDrag.started += instance.OnSquareDrag;
                    @SquareDrag.performed += instance.OnSquareDrag;
                    @SquareDrag.canceled += instance.OnSquareDrag;
                }
            }
        }
        public TileCreatorActions @TileCreator => new TileCreatorActions(this);

        // Interactions
        private readonly InputActionMap m_Interactions;
        private IInteractionsActions m_InteractionsActionsCallbackInterface;
        private readonly InputAction m_Interactions_RunPrimary;
        private readonly InputAction m_Interactions_ViewInteractions;
        public struct InteractionsActions
        {
            private @Controls m_Wrapper;
            public InteractionsActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @RunPrimary => m_Wrapper.m_Interactions_RunPrimary;
            public InputAction @ViewInteractions => m_Wrapper.m_Interactions_ViewInteractions;
            public InputActionMap Get() { return m_Wrapper.m_Interactions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InteractionsActions set) { return set.Get(); }
            public void SetCallbacks(IInteractionsActions instance)
            {
                if (m_Wrapper.m_InteractionsActionsCallbackInterface != null)
                {
                    @RunPrimary.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnRunPrimary;
                    @RunPrimary.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnRunPrimary;
                    @RunPrimary.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnRunPrimary;
                    @ViewInteractions.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnViewInteractions;
                    @ViewInteractions.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnViewInteractions;
                    @ViewInteractions.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnViewInteractions;
                }
                m_Wrapper.m_InteractionsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @RunPrimary.started += instance.OnRunPrimary;
                    @RunPrimary.performed += instance.OnRunPrimary;
                    @RunPrimary.canceled += instance.OnRunPrimary;
                    @ViewInteractions.started += instance.OnViewInteractions;
                    @ViewInteractions.performed += instance.OnViewInteractions;
                    @ViewInteractions.canceled += instance.OnViewInteractions;
                }
            }
        }
        public InteractionsActions @Interactions => new InteractionsActions(this);
        public interface ICameraActions
        {
            void OnZoom(InputAction.CallbackContext context);
            void OnVerticalRotation(InputAction.CallbackContext context);
            void OnHorizontalRotation(InputAction.CallbackContext context);
            void OnMouseRotation(InputAction.CallbackContext context);
            void OnSnapRight(InputAction.CallbackContext context);
            void OnSnapLeft(InputAction.CallbackContext context);
        }
        public interface IMovementActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnToggleRun(InputAction.CallbackContext context);
        }
        public interface IConsoleActions
        {
            void OnOpen(InputAction.CallbackContext context);
            void OnClose(InputAction.CallbackContext context);
            void OnSubmit(InputAction.CallbackContext context);
            void OnSwitchCommand(InputAction.CallbackContext context);
        }
        public interface IHotkeysActions
        {
            void OnSwapHands(InputAction.CallbackContext context);
            void OnUse(InputAction.CallbackContext context);
            void OnDrop(InputAction.CallbackContext context);
            void OnToggleInternalClothing(InputAction.CallbackContext context);
        }
        public interface IOtherActions
        {
            void OnFade(InputAction.CallbackContext context);
            void OnSwapMinds(InputAction.CallbackContext context);
            void OnPrimaryClick(InputAction.CallbackContext context);
            void OnSecondaryClick(InputAction.CallbackContext context);
            void OnToggleMenu(InputAction.CallbackContext context);
            void OnSpawnCans(InputAction.CallbackContext context);
            void OnToggleRuntimeEditor(InputAction.CallbackContext context);
            void OnRagdoll(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnSeeContainerContents(InputAction.CallbackContext context);
            void OnShowOwner(InputAction.CallbackContext context);
            void OnToggleSelectionDebug(InputAction.CallbackContext context);
            void OnSendChatMessage(InputAction.CallbackContext context);
        }
        public interface ITileCreatorActions
        {
            void OnToggleMenu(InputAction.CallbackContext context);
            void OnPlace(InputAction.CallbackContext context);
            void OnReplace(InputAction.CallbackContext context);
            void OnRotate(InputAction.CallbackContext context);
            void OnDelete(InputAction.CallbackContext context);
            void OnSquareDrag(InputAction.CallbackContext context);
        }
        public interface IInteractionsActions
        {
            void OnRunPrimary(InputAction.CallbackContext context);
            void OnViewInteractions(InputAction.CallbackContext context);
        }
    }
}
